// Generated by CoffeeScript 2.7.0
// (function() {
// Use coffee-script compiler to obtain a javascript file.

//    coffee -c bbox_annotator.coffee

// See http://coffeescript.org/

// BBox selection window.
// var BBoxSelector;

export class BBoxSelector {
  // Initializes selector in the image frame.
  constructor(image_frame, options) {
    if (options == null) {
      options = {};
    }
    options.input_method || (options.input_method = "text");
    this.image_frame = image_frame;
    this.border_width = options.border_width || 2;
    this.selector = $('<div class="bbox_selector"></div>');
    this.selector.css({
      border: this.border_width + "px dotted rgb(127,255,127)",
      position: "absolute",
    });
    this.image_frame.append(this.selector);
    this.selector.css({
      "border-width": this.border_width,
    });
    this.selector.hide();
    this.create_label_box(options);
  }

  // Initializes a label input box.
  create_label_box(options) {
    var i, label, len, ref;
    options.labels || (options.labels = ["object"]);
    this.label_box = $('<div class="label_box"></div>');
    this.label_box.css({
      position: "absolute",
    });
    this.image_frame.append(this.label_box);
    switch (options.input_method) {
      // case 'select':
      //   if (typeof options.labels === "string") {
      //     options.labels = [options.labels];
      //   }
      //   this.label_input = $('<select class="label_input" name="label"></select>');
      //   this.label_box.append(this.label_input);
      //   this.label_input.append($('<option value>choose an item</option>'));
      //   ref = options.labels;
      //   for (i = 0, len = ref.length; i < len; i++) {
      //     label = ref[i];
      //     this.label_input.append('<option value="' + label + '">' + label + '</option>');
      //   }
      //   this.label_input.change(function(e) {
      //     return this.blur();
      //   });
      //   break;
      case "text":
        if (typeof options.labels === "string") {
          options.labels = [options.labels];
        }
        this.label_input = $(
          '<input class="label_input" name="label" ' + 'type="text" value>'
        );
        this.label_box.append(this.label_input);
        this.label_input.autocomplete({
          source: options.labels || [""],
          autoFocus: true,
        });
        break;
      case "fixed":
        if ($.isArray(options.labels)) {
          options.labels = options.labels[0];
        }
        this.label_input = $(
          '<input class="label_input" name="label" type="text">'
        );
        this.label_box.append(this.label_input);
        this.label_input.val(options.labels);
        break;
      default:
        throw "Invalid label_input parameter: " + options.input_method;
    }
    return this.label_box.hide();
  }

  // Crop x and y to the image size.
  crop(pageX, pageY) {
    var point;
    return (point = {
      x: Math.min(
        Math.max(
          Math.round(
            // dividing offset left annotatorOptions.scale because while zoomed in mouse pointer position was offseting.
            (pageX - this.image_frame.offset().left) / annotatorOptions.scale
          ),
          0
        ),
        Math.round(this.image_frame.width() - 1)
      ),
      y: Math.min(
        Math.max(
          Math.round(
            (pageY - this.image_frame.offset().top) / annotatorOptions.scale
          ),
          0
        ),
        Math.round(this.image_frame.height() - 1)
      ),
    });
  }

  // When a new selection is made.
  start(pageX, pageY) {
    this.pointer = this.crop(pageX, pageY);
    this.offset = this.pointer;
    this.refresh();
    this.selector.show();
    $("body").css("cursor", "crosshair");
    return (document.onselectstart = function () {
      return false;
    });
  }

  // When a selection updates.
  update_rectangle(pageX, pageY) {
    this.pointer = this.crop(pageX, pageY);
    return this.refresh();
  }

  // When starting to input label.
  input_label(options) {
    $("body").css("cursor", "default");
    document.onselectstart = function () {
      return true;
    };
    this.label_box.show();
    return this.label_input.focus();
  }

  // Finish and return the annotation.
  finish(options) {
    var data;
    this.label_box.hide();
    this.selector.hide();
    data = this.rectangle();
    data.label = $.trim(this.label_input.val().toLowerCase());
    if (options.input_method !== "fixed") {
      this.label_input.val("");
    }
    return data;
  }

  // Get a rectangle.
  rectangle() {
    var rect, x1, x2, y1, y2;
    x1 = Math.min(this.offset.x, this.pointer.x);
    y1 = Math.min(this.offset.y, this.pointer.y);
    x2 = Math.max(this.offset.x, this.pointer.x);
    y2 = Math.max(this.offset.y, this.pointer.y);
    return (rect = {
      left: x1 + 2,
      top: y1 + 2,
      width: x2 - x1 + 1,
      height: y2 - y1 + 1,
    });
  }

  // Update css of the box.
  refresh() {
    var rect;
    rect = this.rectangle();
    this.selector.css({
      left: rect.left - this.border_width + "px",
      top: rect.top - this.border_width + "px",
      width: rect.width + "px",
      height: rect.height + "px",
    });
    return this.label_box.css({
      left: rect.left - this.border_width + "px",
      top: rect.top + rect.height + this.border_width + "px",
    });
  }

  // Return input element.
  get_input_element() {
    return this.label_input;
  }
}

// Annotator object definition.
var annotator;
var annotatorOptions;
export class BBoxAnnotator {
  // Initialize the annotator layout and events.
  constructor(options) {
    var image_element;
    annotator = this;
    annotatorOptions = options;
    this.annotator_element = $(options.id || "#bbox_annotator");
    this.scale = options.scale || 1;
    this.border_width = options.border_width || 2;
    this.show_label = options.show_label || options.input_method !== "fixed";
    if (options.multiple != null) {
      this.multiple = options.multiple;
    } else {
      this.multiple = true;
    }
    this.image_frame = $('<div class="image_frame" id="frame"></div>');
    document.getElementsByClassName("image_frame").length === 0 &&
      this.annotator_element.append(this.image_frame);
    if (options.guide) {
      annotator.initialize_guide(options.guide);
    }
    image_element = new Image();
    image_element.src = options.url;
    image_element.onload = function () {
      options.width || (options.width = image_element.width);
      options.height || (options.height = image_element.height);
      annotator.annotator_element.css({
        width: "100%",
        height: "100%",
        "padding-left": annotator.border_width / 2 + "px",
        "padding-top": annotator.border_width / 2 + "px",
        cursor: "crosshair",

        position: "relative",
        display: "flex",
        "align-items": "center",
        "justify-content": "center",
        // overflow: "hidden",
        //scale: options.scale || 1,
      });
      annotator.image_frame.css({
        "background-image": `url(${
          options.image_element.src || image_element.src
        })`,
        width: options.image_element.width || image_element.width || "100%",
        height: options.image_element.height || image_element.height || "100%",
        position: "absolute",
        "background-size": "100% 100%",
        //scale: `${options.scale}`,
      });
      annotator.selector = new BBoxSelector(annotator.image_frame, options);
      return annotator.initialize_events(options);
    };
    image_element.onerror = function () {
      return annotator.annotator_element.text(
        "Invalid image URL: " + options.url
      );
    };
    this.entries = [];
    this.onchange = options.onchange;
  }

  // Initialize events.
  initialize_events(options) {
    var annotator, selector, status;
    status = "free";
    this.hit_menuitem = false;
    annotator = this;
    selector = annotator.selector;
    this.annotator_element.mousedown(function (e) {
      if (!annotator.hit_menuitem) {
        switch (status) {
          case "free":
          case "input":
            if (status === "input") {
              // selector.get_input_element().blur();
            }
            if (e.which === 1) {
              // left button
              selector.start(e.pageX, e.pageY);
              status = "hold";
            }
        }
      }
      annotator.hit_menuitem = false;
      return true;
    });
    $(window).mousemove(function (e) {
      var offset;
      switch (status) {
        case "hold":
          selector.update_rectangle(e.pageX, e.pageY);
      }
      if (annotator.guide_h) {
        offset = annotator.image_frame.offset();
        annotator.guide_h.css("top", Math.floor(e.pageY - offset.top) + "px");
        annotator.guide_v.css("left", Math.floor(e.pageX - offset.left) + "px");
      }
      return true;
    });
    $(window).mouseup(function (e) {
      switch (status) {
        case "hold":
          selector.update_rectangle(e.pageX, e.pageY);
          selector.input_label(options);
          status = "input";
          if (options.input_method === "fixed") {
            // selector.get_input_element().blur();
          }
      }
      return true;
    });

    const getHotKeys = () => {
      const hotkeys = [];
      const tags = document.querySelectorAll("div.hotkey");
      tags.forEach((tag) => {
        const trigger = convertNumberToKeyboardValue(
          tag.getAttribute("data-hotkey_trigger")
        );
        const value = tag.getAttribute("data-hotkey_value");
        hotkeys.push({
          trigger,
          value,
        });
      });
      return hotkeys;
    };
    function convertNumberToKeyboardValue(number) {
      const keyboardValues = [];
      keyboardValues.push(parseInt(number) + 48); // Push the ASCII code for the number key
      keyboardValues.push(parseInt(number) + 96); // Push the ASCII code for the numpad key
      return keyboardValues;
    }

    selector.get_input_element().keydown(function (e) {
      const hotKeyList = getHotKeys();
      const keypress = e.which;
      let hotKeyPressed = null;
      const keypressIsHotkey = hotKeyList.some((hotkey) => {
        if (!hotkey.trigger.includes(keypress)) {
          return false;
        }

        hotKeyPressed = hotkey;
        return true;
      });

      const keyPressIsEnter = e.which === 13;
      const keyPressIsEscape = e.which === 27;
      if (!keypressIsHotkey && !keyPressIsEnter && !keyPressIsEscape) {
        return e.which !== 13;
      }

      switch (status) {
        case "input":
          if (keyPressIsEnter) {
            var data = selector.finish(options);
            if (data.label) {
              annotator.add_entry(data);
              if (annotator.onchange) {
                annotator.onchange(annotator.entries);
              }
            }
            selector.get_input_element().blur();
          } else if (keyPressIsEscape) {
            selector.finish(options);
            selector.get_input_element().blur();
          } else if (keypressIsHotkey) {
            const inputField = document.querySelector(".label_input");
            const value = inputField.value;
            if (value !== "") {
              return false;
            }
            inputField.value = hotKeyPressed.value;
            var data = selector.finish(options);
            if (data.label) {
              annotator.add_entry(data);
              if (annotator.onchange) {
                annotator.onchange(annotator.entries);
              }
            }
            selector.get_input_element().blur();
          }
      }
      return e.which !== 13;
    });
    selector.get_input_element().mousedown(function (e) {
      return (annotator.hit_menuitem = true);
    });
    selector.get_input_element().mousemove(function (e) {
      return (annotator.hit_menuitem = true);
    });
    selector.get_input_element().mouseup(function (e) {
      return (annotator.hit_menuitem = true);
    });
    return selector
      .get_input_element()
      .parent()
      .mousedown(function (e) {
        return (annotator.hit_menuitem = true);
      });
  }

  // Add a new entry.
  add_entry(entry) {
    const tagName = entry.label;
    // Find the first element with the specified tag name
    let element = null;
    const elements = document.querySelectorAll("div.hotkey");
    elements.forEach((e) => {
      if (tagName !== e.getAttribute("data-hotkey_value")) {
        return false;
      }
      element = e;
      return true;
    });
    let textColor = "rgb(127, 255, 127)";
    // If the element exists, return the color of the text
    if (element) {
      textColor = element.getAttribute("data-color");
    }
    var annotator, box_element, close_button, text_box;
    if (!this.multiple) {
      this.annotator_element.find(".annotated_bounding_box").detach();
      this.entries.splice(0);
    }
    this.entries.push(entry);
    box_element = $('<div class="annotated_bounding_box"></div>');
    box_element.appendTo(this.image_frame).css({
      border: this.border_width + "px solid " + textColor,
      position: "absolute",
      top: entry.top - this.border_width + "px",
      left: entry.left - this.border_width + "px",
      width: entry.width + "px",
      height: entry.height + "px",
      color: textColor,
      "font-family": "monospace",
      "font-size": "small",
      // "min-width": "10px",
      // "min-height": "10px",
    });
    close_button = $("<div></div>").appendTo(box_element).css({
      position: "absolute",
      top: "-8px",
      right: "-8px",
      width: "20px",
      height: "20px",
      padding: "0",
      overflow: "hidden",
      color: "#fff",
      "background-color": "#030",
      border: "1px solid #fff",
      "-moz-border-radius": "18px",
      "-webkit-border-radius": "18px",
      "border-radius": "50%",
      cursor: "pointer",
      "-moz-user-select": "none",
      "-webkit-user-select": "none",
      "user-select": "none",
      "text-align": "center",
      display: "flex",
      "align-items": "center",
      "justify-content": "center",
    });
    $("<div></div>")
      .appendTo(close_button)
      .html("&#215;")
      .css({
        "text-align": "center",
        position: "absolute",
        top: "-3px",
        left: "5px",
        "font-size": "16px",
        "line-height": "normal",
        "font-family":
          '"Helvetica Neue", Consolas, Verdana, Tahoma, Calibri, ' +
          'Helvetica, Menlo, "Droid Sans", sans-serif',
      });
    text_box = $("<div></div>").appendTo(box_element).css({
      overflow: "hidden",
      width: "max-content",
      position: "absolute",
      bottom: "-30px",
      right: "0",
      "word-break": "break-word",
    });
    if (this.show_label) {
      text_box.text(entry.label);
    }
    annotator = this;
    box_element.hover(
      function (e) {
        return close_button.show();
      },
      function (e) {
        return close_button.hide();
      }
    );
    close_button.mousedown(function (e) {
      return (annotator.hit_menuitem = true);
    });
    close_button.click(function (e) {
      var clicked_box, index;
      clicked_box = close_button.parent(".annotated_bounding_box");
      index = clicked_box.prevAll(".annotated_bounding_box").length;
      clicked_box.detach();
      annotator.entries.splice(index, 1);
      return annotator.onchange(annotator.entries, index);
    });
    return close_button.hide();
  }

  // bounding box annotation zoom in functionality
  handle_zoomin(entries) {
    annotatorOptions.scale = entries.scale;
    annotatorOptions.width = 870.9;
    annotatorOptions.height = 376;
    annotator.annotator_element.css({
      scale: entries.scale,
    });
    let imageFrame = document.getElementsByClassName("image_frame");
    if (imageFrame.length !== 0) {
      imageFrame[0].style.scale = entries.scale;
    }
  }

  // bounding box annotation zoom out functionality
  handle_zoomout(entries) {
    annotatorOptions.scale = entries.scale;
    annotator.annotator_element.css({
      scale: entries.scale,
    });
    let imageFrame = document.getElementsByClassName("image_frame");
    if (imageFrame.length !== 0) {
      imageFrame[0].style.scale = entries.scale;
    }
  }

  // Clear all entries.
  clear_all(e) {
    this.annotator_element.find(".annotated_bounding_box").detach();
    this.entries.splice(0);
    return this.onchange(this.entries);
  }

  // Add crosshair guide.
  initialize_guide(options) {
    this.guide_h = $('<div class="guide_h"></div>')
      .appendTo(this.image_frame)
      .css({
        border: "1px dotted " + (options.color || "#000"),
        height: "0",
        width: "100%",
        position: "absolute",
        top: "0",
        left: "0",
      });
    return (this.guide_v = $('<div class="guide_v"></div>')
      .appendTo(this.image_frame)
      .css({
        border: "1px dotted " + (options.color || "#000"),
        height: "100%",
        width: "0",
        position: "absolute",
        top: "0",
        left: "0",
      }));
  }
}

const temp_getHotKeys = () => {
  const hotkeys = [];
  const tags = document.querySelectorAll("div.hotkey");
  tags.forEach((tag) => {
    const trigger = temp_convertNumberToKeyboardValue(
      tag.getAttribute("data-hotkey_trigger")
    );
    const value = tag.getAttribute("data-hotkey_value");
    const element = tag;
    hotkeys.push({
      trigger,
      value,
      element,
    });
  });
  return hotkeys;
};
function temp_convertNumberToKeyboardValue(number) {
  const keyboardValues = [];
  keyboardValues.push(parseInt(number) + 48); // Push the ASCII code for the number key
  keyboardValues.push(parseInt(number) + 96); // Push the ASCII code for the numpad key
  return keyboardValues;
}

document.addEventListener("keydown", (e) => {
  if (e.target.tagName !== "BODY") {
    return false;
  }
  const keypress = e.which;

  if (keypress === 37) {
    //Left Arrow
    const previousButton = document.getElementById("previous_btn");
    if (!previousButton) {
      return false;
    }
    previousButton.click();
    return true;
  }
  if (keypress === 39) {
    //Right Arrow
    const nextButton = document.getElementById("next_btn");
    if (!nextButton) {
      return false;
    }
    nextButton.click();
    return true;
  }

  if (keypress === 13 || keypress === 32) {
    //Enter or spacebar
    const submitButton = document.getElementById("submit_btn");
    if (!submitButton) {
      return false;
    }
    submitButton.click();
    return true;
  }

  if (!document.getElementById("classify_hotkey")) {
    //Only do when doing classifications
    return false;
  }

  const hotKeyList = temp_getHotKeys();

  hotKeyList.some((hotkey) => {
    if (!hotkey.trigger.includes(keypress)) {
      return false;
    }

    hotkey.element.click();
    return true;
  });
});
// }).call(this);
